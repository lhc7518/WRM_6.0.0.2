<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml"
xmlns:ev="http://www.w3.org/2001/xml-events"
xmlns:w2="http://www.inswave.com/websquare"
xmlns:xf="http://www.w3.org/2002/xforms">
    <head meta_screenId="main" meta_screenName="메인 레이아웃 페이지 공통 함수">
		<w2:type>COMMON</w2:type>
		<w2:buildDate/>
		<w2:MSA/>
		<xf:model>
			<w2:dataCollection baseNode="map">
			</w2:dataCollection>
			<w2:workflowCollection>
			</w2:workflowCollection>
		</xf:model>
		<w2:layoutInfo>
		</w2:layoutInfo>
		<w2:publicInfo method="scwin.initMainLoad,scwin.closeBeforePage,scwin.pushStateMain,scwin.setHeaderMenu,scwin.getLayoutId,scwin.isMobileSize"/>
        <script lazy="false" type="text/javascript"><![CDATA[
scwin.onpageload = function() {
	
};


/**
 * @method
 * @name initMainLoad
 * @description 화면 초기 로딩
 * @param
 * @hidden N
 * @exception 
 */ 
scwin.initMainLoad = function() {
	wfm_side.getWindow().scwin.getInitData();

	const deviceWidth = $c.num.parseFloat($("body").css("width"));
	if (deviceWidth < 1280) {
		$(".wrap").removeClass("show_menu");
		$(".btn_toggle_menu").removeClass("on");
	}

	$c.win.addEventOnBeforeUnload();	
};

/**
 * @method
 * @name setHeaderMenu
 * @description header menu 생성
 * @param
 * @hidden N
 * @exception 
 */ 
scwin.setHeaderMenu = function() {
	wfm_header.getWindow().scwin.setGenerator(); // 메뉴 생성
	wfm_header.getWindow().scwin.setMenuCss(); // 메뉴 css 적용
};

/**
 * @method
 * @name getLayoutId
 * @description 메인 레이아웃 아이디 정보를 반환한다.
 * @param
 * @hidden N
 * @exception 
 */ 
scwin.getLayoutId = function() {
	if (typeof $p.main().$p.getComponentById("tac_layout") === "object") {
		return "T";
	} else if (typeof $p.main().$p.getComponentById("wdc_main") === "object") {
		return "M";
	} else if (typeof $p.main().$p.getComponentById("wfm_layout") === "object") {
		return "S";
	}
	return null;
};

/**
 * @method
 * @name isMobileSize
 * @description 화면 해상도가 모바일 사이즈인지 반환한다.
 * @param
 * @hidden N
 * @exception 
 * @example ${example}
 */ 
scwin.isMobileSize = function() {
	const size = {
		width : window.innerWidth || document.body.clientWidth,
		height : window.innerHeight || document.body.clientHeight
	};

	if (size.width <= 1024) {
		return true;
	} else {
		return false;
	}
};

/**
 * @method
 * @name closeBeforePage
 * @description 화면이 닫히 전에 변경된 데이터가 있는지 검사한다.
 * @param {string} frameObj 닫으려는 화면의 wframe obj
 * @hidden N
 * @exception 
 * @example main.closeBeforePage(frameObj)
 */ 
scwin.closeBeforePage = function(frameObj) {
	if (checkBeforeCloseModified(frameObj)) {
		if (confirm($c.data.getMessage("MSG_CM_00006"))) {
			return true;
		} else {
			return false;
		}
	} else {
		return true;
	}
	
	function checkBeforeCloseModified(frameObj) {
		const changeCheckMainFrame = $c.data.getChangeCheckedMainFrame(frameObj.scope.$p);
		if (!$c.util.isEmpty(changeCheckMainFrame)) {
			const changeCheckDcList = $c.data.getChangeCheckedMainFrame(frameObj.scope.$p)._changeCheckDcList;

			if (!$c.util.isEmpty(changeCheckDcList) && $c.util.isArray(changeCheckDcList) && (changeCheckDcList.length > 0)) {
				for (let i = 0; i < changeCheckDcList.length; i++) {
					const dlObj = $c.util.getComponent(changeCheckDcList[i]);
					if (!$c.util.isEmpty(dlObj) && (dlObj.getObjectType() == "dataList" || dlObj.getObjectType() == "dataMap")) {
						if (dlObj.getModifiedIndex().length > 0) {
							return true;
						}
					}
				}
			}
		}

		return false;
	};
};

/**
 * @method
 * @name pushStateMain
 * @description 메인 화면으로 History를 저장한다.
 * @param
 * @hidden N
 * @exception 
 * @example main.pushStateMain();
 */ 
scwin.pushStateMain = function() {
	const data = {
			menuInfo : {
				menuNm : "메인",
				menuCode : "MAIN"
			}
		};
	$c.win.pushState(data);
};
]]></script>
    </head>
    <body ev:onpageload="scwin.onpageload"/>
</html>
