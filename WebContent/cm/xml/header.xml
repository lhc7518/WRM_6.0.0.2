<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:w2="http://www.inswave.com/websquare"
	xmlns:xf="http://www.w3.org/2002/xforms">
	<head meta_screenId="header" meta_screenName="레이아웃 header 프레임">
		<w2:type>COMPONENT</w2:type>
		<w2:buildDate />
		<xf:model>
			<xf:instance>
				<data xmlns="" />
			</xf:instance>
			<w2:dataCollection baseNode="map">
				<w2:dataMap baseNode="map" id="dma_setting">
					<w2:keyInfo>
						<w2:key id="MAIN_LAYOUT_PAGE_CODE" name="메인 레이아웃" dataType="text"></w2:key>
						<w2:key id="MODE_TYPE" name="화면스타일" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
			</w2:dataCollection>
			<w2:workflowCollection></w2:workflowCollection>
			<xf:submission id="sbm_selectMainSetting" action="/main/selectBmMainSetting" method="post" mediatype="application/json" ref=""
				target="data:json,dma_setting" encoding="UTF-8" instance="" replace="" errorHandler="" customHandler="" mode="asynchronous"
				processMsg="" ev:submit="" ev:submitdone="scwin.sbm_selectMainSetting_submitdone" ev:submiterror="" abortTrigger="">
			</xf:submission>
			<xf:submission id="sbm_updateMainSetting" action="/main/updateBmMainSetting" method="post" mediatype="application/json"
				ref="data:json,dma_setting" target="" encoding="UTF-8" instance="" replace="" errorHandler="" customHandler="" mode="asynchronous"
				processMsg="" ev:submit="" ev:submitdone="scwin.setUpdateMainSetCallback" ev:submiterror="" abortTrigger="">
			</xf:submission>
		</xf:model>
		<script type="text/javascript" lazy="false"><![CDATA[// Chat, ViewType Flag
scwin.displayChk = false;

scwin.onpageload = function () {
    // ViewType값 조회
    $c.sbm.execute(sbm_selectMainSetting);
};

/**
 * @method
 * @name setGenerator
 * @description 좌측 메뉴를 생성한다.
 * @hidden N
 * @exception 
 */
scwin.setGenerator = function () {
    gen_firstGenerator.removeAll();

    let tmpDataArr = $p.parent().wfm_side.getWindow().dlt_menu.getAllJSON();
    let tmpParentIdx = 0;
    let tmpIdx = 0, tmpIdx2 = 0;
    let thirdIndex = 0;

    //첫번째 메뉴 세팅
    for (let i = 0; i < tmpDataArr.length; i++) {
        let headerData_obj = tmpDataArr[i];
        let menuDepth = headerData_obj.MENU_LEVEL;
        let secondGene = gen_firstGenerator.getChild(tmpParentIdx, "gen_SecondGenerator");

        if (menuDepth == "1") {
            tmpParentIdx = gen_firstGenerator.insertChild();
            let firstMenuLabel = gen_firstGenerator.getChild(tmpParentIdx, "btn_menu1_Label");
            firstMenuLabel.setValue(headerData_obj.MENU_NM);
            firstMenuLabel.setUserData("ins_webPath", headerData_obj.SRC_PATH);
            firstMenuLabel.setUserData("ins_key", headerData_obj.PARENT_MENU_CD);
            firstMenuLabel.setUserData("ins_label", headerData_obj.MENU_NM);
            firstMenuLabel.setUserData("ins_code", headerData_obj.MENU_CD);
        } else if (menuDepth == "2") {
            tmpIdx = secondGene.insertChild();
            let secondMenuLabel = secondGene.getChild(tmpIdx, "btn_menu2_Label");
            secondMenuLabel.setValue(headerData_obj.MENU_NM);
            thirdIndex = tmpIdx;
        } else if (menuDepth == "3") {
            let thirdGene = secondGene.getChild(thirdIndex, 'gen_thirdGenerator');
            tmpIdx2 = thirdGene.insertChild();
            const thirdMenuLabel = thirdGene.getChild(tmpIdx2, "btn_menu3_Label");
            thirdMenuLabel.setValue(headerData_obj.MENU_NM);
            thirdMenuLabel.setUserData("ins_webPath", headerData_obj.SRC_PATH);
            thirdMenuLabel.setUserData("ins_key", headerData_obj.PARENT_MENU_CD);
            thirdMenuLabel.setUserData("ins_label", headerData_obj.MENU_NM);
            thirdMenuLabel.setUserData("ins_code", headerData_obj.MENU_CD);
        }
    }

    let firstMenuCount = gen_firstGenerator.getChildrenCount();
    for (let i = 0; i < firstMenuCount; i++) {
        let secondGene = gen_firstGenerator.getChild(i, "gen_SecondGenerator");
        if (secondGene.getChildrenCount() === 0) {
            secondGene.remove();
        }
    }
};

/**
 * @method
 * @name setMenuCss
 * @description 생성된 메뉴의 css 적용한다.
 * @param
 * @hidden N
 * @exception 
 */
scwin.setMenuCss = function () {
    // GNB MENU
    $(function () {
        $(".gnb_menu a").click(function () {
            if (!$(this).parent().parent().hasClass("on")) {
                $(this).parent().parent().addClass("on").siblings().removeClass("on");
            }
        });
        $(".dep2 li a").click(function () {
            const pTop = $(this).parent().position().top;
            $(this).siblings().css("top", pTop + "px");
            $(this).parent().parent().children().removeClass("on");
            $(this).parent().addClass("on");
            $(this).children().addClass("on");
        });
        $(".dep2").mouseleave(function () {
            $(this).parent().removeClass("on");
            $(this).children().removeClass("on");
        });
        $(".items").mouseleave(function () {
            $(this).removeClass("on");
        });
    });
};

/**
 * @event
 * @name btn_menu1_Label_onclick
 * @description header에 속한 메뉴 클릭 시 발생하는 이벤트 1depth
 */
scwin.btn_menu1_Label_onclick = function () {
    const urlPath = this.getUserData("ins_webPath");
    if (urlPath != "") {
        const label = this.getUserData("ins_label");
        const pageCode = this.getUserData("ins_code");

        $p.main().wfm_side.getWindow().scwin.setMenuRelation(label, urlPath, pageCode);
    }
};

/**
 * @event
 * @name btn_menu2_Label_onclick
 * @description header에 속한 메뉴 클릭 시 발생하는 이벤트, 2depth
 */
scwin.btn_menu2_Label_onclick = function () {
    const urlPath = this.getUserData("ins_webPath");

    if (urlPath && urlPath != "") {
        const label = this.getUserData("ins_label");
        const pageCode = this.getUserData("ins_code");

        $p.main().wfm_side.getWindow().scwin.setMenuRelation(label, urlPath, pageCode);

        $(".dep2").removeClass('on');
        $(".gnb_menu").removeClass('show');
        $(".gnb_menu li").removeClass('on');
    }
};

/**
 * @event
 * @name btn_menu3_Label_onclick
 * @description header에 속한 메뉴 클릭 시 발생하는 이벤트, 3depth
 */
scwin.btn_menu3_Label_onclick = async function () {

    const urlPath = this.getUserData("ins_webPath");

    if (urlPath && urlPath != "") {
        const label = this.getUserData("ins_label");
        const pageCode = this.getUserData("ins_code");

        if (pageCode === "001002003" && $c.util.getUserAgent() === "msie") {
            await $c.win.alert("IE에서는 FullCalendar를 지원하지 않습니다. FullCalendar를 사용하기 위해서는 현재 버전보다 하위 버전을 사용해야 합니다.");
            return;
        }

        // menuObj 정보
        const menuObj = $p.main().wfm_side.getWindow().dlt_menu.getMatchedJSON('MENU_CD', pageCode);
        const side = $p.main().wfm_side.getWindow();

        side.scwin.setMenuRelation(label, urlPath, pageCode);
        side.scwin.collapseAll();
        side.scwin.second_genAll();
        side.scwin.third_genAll();
        side.scwin.toggle_3depthMenu(menuObj);
        $(".dep2 li").removeClass('on');
        $(".gnb_menu li").removeClass('on');
    }
};

/**
 * @event
 * @name btn_setting_onclick
 * @description 환경설정 관리 팝업창을 오픈한다.
 */
scwin.btn_setting_onclick = function () {
    const data = { "data": "", callbackFn: "scwin.callbackSetting" };

    const options = {
        "id": "mainSettingPop",
        "width": "500px",
        "height": "200px",
        frameModal: "top",
        "popupName": "환경설정 관리",
        "modal": true
    };

    $c.win.openPopup("/cm/xml/settingPop.xml", options, data);
};

/**
 * @method
 * @name callbackSetting
 * @description layout 모드를 선택 후 callback 함수
 * @param {string} res 화면 처리 결과
 * @hidden N
 * @exception 
 */
scwin.callbackSetting = async function (res) {
    if (await $c.win.confirm("정상 처리되었습니다. 화면을 갱신하시겠습니까?")) {
        scwin.execUpdateMainSettingConfirmCallback();
    };
};

/**
 * @method
 * @name execUpdateMainSettingConfirmCallback
 * @description Layout Setting의 confirm 이후 callback 함수
 * @param {string} res 
 * @hidden N
 * @exception 
 * @example ${example}
 */
scwin.execUpdateMainSettingConfirmCallback = function (res) {
    $c.win.removeEventOnBeforeUnload();
    $c.win.goHome();
};

/**
 * @event
 * @name btn_toggle_onclick
 * @description side 메뉴 토글 버튼 클릭 시 발생하는 이벤트 정의
 */
scwin.btn_toggle_onclick = function () {
    scwin.toggleMenu();
};

/**
 * @method
 * @name toggleMenu
 * @description 메뉴창을 숨긴다.
 * @param
 * @hidden N
 * @exception 
 */
scwin.toggleMenu = function () {
    $(".dim").toggleClass("hide");
}

/**
 * @event
 * @name btn_logout_onclick
 * @description 로그아웃 버튼 클릭 시 발생하는 이벤트 정의
 */
scwin.btn_logout_onclick = function (e) {
    $c.win.logout();
};

/**
 * 로그인된 사용자의 비밀번호를 변경한다.
 */
scwin.btn_changePassword_onclick = function (e) {
    const data = { "empCd": $p.parent().wfm_side.getWindow().dma_defInfo.get("EMP_CD") };

    const options = {
        "id": "settingPassword",
        "width": "500px",
        "height": "280px",
        "popupName": "비밀번호변경",
        frameModal: "top",
        "modal": true
    };

    $c.win.openPopup("/cm/xml/settingPassword.xml", options, data);
};

/**
 * @event
 * @name btn_Setting_onclick
 * @description Wheader setting 버튼 클릭 시 발생하는 이벤트
 */
scwin.btn_logo_onclick = function () {
    $c.win.goHome();
};

/**
 * @event
 * @name btn_Setting_onclick
 * @description Wheader setting 버튼 클릭 시 발생하는 이벤트
 */
scwin.btn_Setting_onclick = function (e) {

    if (!scwin.displayChk) {
        $(".settingbox").toggleClass("on");
        scwin.displayChk = true;
    } else {
        $(".settingbox").toggleClass("on");
        $(".chat_wrap").removeClass("on");
    }
};

/**
 * @event
 * @name aiChat_onclick
 * @description W-talk 메시지를 보내는 버튼 클릭 시 발생하는 이벤트
 */
scwin.aiChat_onclick = function (e) {
    const week = $c.date.getDay($c.date.getServerDateTime("yyyyMMdd")).slice(0, 1);
    const month = $c.date.getServerDateTime("MM");
    const day = $c.date.getServerDateTime("dd");
    $p.main().wfm_wtalk.getWindow().chat_date.setValue(month + "." + day + " <span>(" + week + ")</span>");
    if (!scwin.displayChk) {
        $('.chat_wrap').toggleClass("on");
    } else {
        $(".chat_wrap").toggleClass("on");
        $(".settingbox").removeClass("on");

    }
    scwin.displayChk = true;
};

/**
 * @event
 * @name mainSetting_onclick
 * @description Layout 설정 항목을 클릭 시 발생하는 이벤트
 */
scwin.mainSetting_onclick = function () {

    const viewType = this.getUserData("userData1");
    dma_setting.set("MAIN_LAYOUT_PAGE_CODE", viewType);

    // ViewType 설정 값 변환 Submission
    $c.sbm.execute(sbm_updateMainSetting);
};

/**
 * @method
 * @name setUpdateMainSetCallback
 * @description Layout의 설정을 한 직후 화면 갱신 여부 동작을 위한 함수
 * @param {string} e submission 통신 결과 객체
 * @hidden N
 * @exception 
 */
scwin.setUpdateMainSetCallback = async function (e) {
    if ($c.sbm.getResultCode(e) == $c.sbm.getMessageCode('STATUS_SUCCESS')) {
        if (await $c.win.confirm("정상 처리되었습니다. 화면을 갱신하시겠습니까?")) {
            scwin.execUpdateMainSettingConfirmCallback();
        };
    }
};

scwin.execUpdateMainSettingConfirmCallback = function (res) {
    $c.win.removeEventOnBeforeUnload();
    $c.win.goHome();
};

/**
 * @event
 * @name styleSetting_onclick
 * @description light, Dark 모드를 설정 클릭 시 발생하는 이벤트 정의
 */
scwin.styleSetting_onclick = function () {
    const styleType = this.getUserData("userData2");
    dma_setting.set("MODE_TYPE", styleType);

    // styleType 설정 값 변환 Submission
    $c.sbm.execute(sbm_updateMainSetting);
};

/**
 * @method
 * @name sbm_selectMainSetting_submitdone
 * @description Layout Setting을 위한 통신 직후 동작하는 함수
 * @param {string} e submission 결과를 가진 객체
 * @hidden N
 * @exception 
 */
scwin.sbm_selectMainSetting_submitdone = function (e) {
    const styleType = dma_setting.get("MODE_TYPE");
    const viewType = dma_setting.get("MAIN_LAYOUT_PAGE_CODE");

    if (styleType == "L") {
        grp_light.addClass("on");
        grp_dark.removeClass("on");
        $("body").removeClass("dark");
    } else if (styleType == "D") {
        grp_dark.addClass("on");
        grp_light.removeClass("on");
        $("body").addClass("dark");
    }

    if (viewType === "T") {
        grp_tap.addClass("on");
        grp_multi.removeClass("on");
        grp_single.removeClass("on");
    } else if (viewType === "W") {
        grp_multi.addClass("on");
        grp_tap.removeClass("on");
        grp_single.removeClass("on");
    } else if (viewType === "S") {
        grp_single.addClass("on");
        grp_tap.removeClass("on");
        grp_multi.removeClass("on");
    } else {
        return;
    }
};

/**
 * @event
 * @name grp_mymenu_onclick
 * @description 상단 회원메뉴 클릭 시 발생하는 이벤트 정의
 */
scwin.grp_mymenu_onclick = function (e) {
    $(".btn_mymenu").toggleClass("on");
};

scwin.btnMobSetting_onclick = function () {
    $(".wrap").addClass("show_set");
};

scwin.btnMobClose_onclick = function (e) {
    $(".wrap").removeClass("show_set");
};
]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload" class="header">
		<xf:group class="header_inner" id="" style="">
			<xf:group class="header_lt" id="" style="">
				<xf:group class="logobox" id="">
					<w2:anchor class="btn_toggle_menu" id="btn_toggle_menu" name="" outerDiv="false" style="">
						<xf:label><![CDATA[slide]]></xf:label>
					</w2:anchor>
					<xf:group id="" style="" tagname="h1">
						<w2:anchor class="logo" id="btn_logo" outerDiv="false" ev:onclick="scwin.btn_logo_onclick"
							title="inswave systems">
							<xf:label><![CDATA[]]></xf:label>
						</w2:anchor>
					</xf:group>
					<w2:anchor class="btn_icon setting" ev:onclick="scwin.btnMobSetting_onclick" id="btnMobSetting" outerDiv="false"
						style="">
						<xf:label><![CDATA[설정]]></xf:label>
					</w2:anchor>
				</xf:group>
				<w2:generator style="" id="gen_firstGenerator" class="gnb_menu" tagname="ul">
					<xf:group style="" id="" tagname="li">
						<xf:group id="" tagname="h2">
							<w2:anchor outerDiv="false" ev:onclick="scwin.btn_menu1_Label_onclick" style="" id="btn_menu1_Label">
								<xf:label><![CDATA[1depth 메뉴]]></xf:label>
							</w2:anchor>
						</xf:group>
						<w2:generator class="dep2" id="gen_SecondGenerator" style="" tagname="ul">
							<xf:group id="" style="" tagname="li">
								<w2:anchor id="btn_menu2_Label" outerDiv="false" style="" ev:onclick="scwin.btn_menu2_Label_onclick">
									<xf:label><![CDATA[2depth 메뉴]]></xf:label>
								</w2:anchor>
								<w2:generator class="dep3" id="gen_thirdGenerator" style="" tagname="ul">
									<xf:group id="" style="" tagname="li">
										<w2:anchor id="btn_menu3_Label" outerDiv="false" style=""
											ev:onclick="scwin.btn_menu3_Label_onclick">
											<xf:label><![CDATA[3depth 메뉴]]></xf:label>
										</w2:anchor>
									</xf:group>
								</w2:generator>
							</xf:group>
						</w2:generator>
					</xf:group>
				</w2:generator>
			</xf:group>
			<xf:group class="header_rt" id="" style="">
				<xf:trigger class="btn_mob_close" ev:onclick="scwin.btnMobClose_onclick" id="btnMobClose" style="" type="button">
					<xf:label><![CDATA[]]></xf:label>
				</xf:trigger>
				<xf:group class="btn_mymenu" id="grp_mymenu" ev:onclick="scwin.grp_mymenu_onclick">
					<xf:group class="profile" ev:onclick="scwin.btnMyMenu_onclick" id="" style="" tagname="a">
						<xf:group class="profile_img" id="" style="">
							<xf:image id="" src="/cm/images/product/img_profile.svg" style=""></xf:image>
						</xf:group>
						<xf:group class="profile_txt" id="" style="">
							<w2:textbox class="name" id="txt_empNm" label="홍길동" style="" tagname="span"></w2:textbox>
							<w2:textbox class="number" id="txt_empCd" label="100001" style="" tagname="span"></w2:textbox>
						</xf:group>
					</xf:group>
					<xf:group class="mymenu_popup" id="" style="" tagname="ul">
						<xf:group class="pwd" id="" style="" tagname="li">
							<w2:anchor ev:onclick="scwin.btn_changePassword_onclick" id="btn_changePassword" outerDiv="false" style="">
								<xf:label><![CDATA[비밀번호 변경]]></xf:label>
							</w2:anchor>
						</xf:group>
						<xf:group class="logout" id="" style="" tagname="li">
							<w2:anchor class="" ev:onclick="scwin.btn_logout_onclick" id="btn_logout" outerDiv="false" style="">
								<xf:label><![CDATA[Logout]]></xf:label>
							</w2:anchor>
						</xf:group>
					</xf:group>
				</xf:group>
				<xf:group class="alarmbox" id="" style="display:none;">
					<w2:anchor class="btn_icon alarm" ev:onclick="scwin.btnAlarm_onclick" id="" outerDiv="false" style="">
						<xf:label><![CDATA[알림]]></xf:label>
					</w2:anchor>
					<w2:textbox class="alarm_count" id="" label="12" style="" tagname="span"></w2:textbox>
				</xf:group>
				<xf:group class="settingbox" id="" style="">
					<w2:anchor class="btn_icon setting" ev:onclick="scwin.btn_Setting_onclick" id="btn_Setting" outerDiv="false" style="">
						<xf:label><![CDATA[설정]]></xf:label>
					</w2:anchor>
					<xf:group class="setting_popup" id="" style="">
						<xf:group class="grp_setting" id="" style="">
							<w2:textbox class="tit" id="" label="메인 뷰 타입" style=""></w2:textbox>
							<xf:group id="" style="" tagname="ul">
								<xf:group class="" id="grp_tap" style="" tagname="li">
									<xf:trigger id="btn_tap" style="" type="button" ev:onclick="scwin.mainSetting_onclick" userData1="T">
										<xf:label><![CDATA[Tab]]></xf:label>
									</xf:trigger>
								</xf:group>
								<xf:group id="grp_multi" style="" tagname="li" userData1="W">
									<xf:trigger id="btn_multi" style="" type="button" ev:onclick="scwin.mainSetting_onclick"
										userData1="W">
										<xf:label><![CDATA[Multi]]></xf:label>
									</xf:trigger>
								</xf:group>
								<xf:group id="grp_single" style="" tagname="li" userData1="S">
									<xf:trigger id="btn_single" style="" type="button" ev:onclick="scwin.mainSetting_onclick"
										userData1="S">
										<xf:label><![CDATA[Single]]></xf:label>
									</xf:trigger>
								</xf:group>
							</xf:group>
						</xf:group>
						<xf:group class="grp_setting" id="" style="">
							<w2:textbox class="tit" id="" label="화면스타일" style=""></w2:textbox>
							<xf:group id="" style="" tagname="ul">
								<xf:group class="on" id="grp_light" style="" tagname="li" userData2="L">
									<xf:trigger ev:onclick="scwin.styleSetting_onclick" id="btn_theme_light" style="" type="button"
										userData2="L">
										<xf:label><![CDATA[Light]]></xf:label>
									</xf:trigger>
								</xf:group>
								<xf:group id="grp_dark" style="" tagname="li" userData2="D">
									<xf:trigger ev:onclick="scwin.styleSetting_onclick" id="btn_theme_dark" style="" type="button"
										userData2="D">
										<xf:label><![CDATA[Dark]]></xf:label>
									</xf:trigger>
								</xf:group>
							</xf:group>
						</xf:group>
					</xf:group>
				</xf:group>
				<xf:group class="aichatbox" id="" style="">
					<xf:trigger class="btn_aichat" ev:onclick="scwin.aiChat_onclick" id="aiChat" style="" type="button">
						<xf:label><![CDATA[aichat]]></xf:label>
					</xf:trigger>
				</xf:group>
			</xf:group>
		</xf:group>
	</body>
</html>